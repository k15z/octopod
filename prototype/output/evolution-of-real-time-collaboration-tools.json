{
    "title": "Evolution of Real-time Collaboration Tools",
    "description": "The podcast delves into the early development of real-time collaboration tools like Collage, which aimed at enabling shared whiteboards, shared documents, and real-time editing between users in different locations. It discusses the challenges faced due to network performance limitations and the need for users to be online simultaneously, contrasting asynchronous communication like email. The concept was ahead of its time but laid the foundation for modern tools like Zoom and Google Docs.",
    "start_time": 2852.08,
    "end_time": 3367.92,
    "text": " project I was on was a project called collage. And the idea for collage today, you would describe  it as sort of a forerunner to zoom or to, you know, maybe Skype or something like that. And  it did have the idea of doing audio and maybe hopefully doing video conferencing. But the main  thing was like a shared whiteboard, and then shared documents. And so specifically, the idea was  real time collaboration. And so, you know, you and I are scientists in two different locations,  we're writing a paper together, we want to be able to look at the paper at the same time and be able  to make edits such that we can, you know, see each other's edits, like the Google Docs, like the way  Google Docs works today, or to have a whiteboard where you could, you know, you could look at,  you know, imagery or you could look at, you know, draw diagrams, and you could share them and work  them together and annotate them like you had a shared whiteboard. And, you know, I think that  was, that was like a good, I mean, that was a good idea. And like all of that stuff has happened  and is very important today. It was just, I think it was in retrospect, it was just before its time,  which is, you just like the internet, what's that? Out of order and what you should build first,  for sure. Out of order. Yeah, well, there were two problems, which is one is it was just hard  to get it to work, because you just, you needed a certain speed of, you know, you needed a certain  speed of network performance and graphics capability on the computers to make it work. And it was  kind of, it was kind of choppy. And then the other problem was to get a, to get a real-time  collaborative system to work, people have to be online at the same time. Right. And so you and I  are collaborating, we have to be online at the same time. And we might be in totally different  time zones. And, you know, like it's just, it's, so it's hard to get critical mass for a network  effect. If you have to be online at the same time, whereas, you know, things like email worked if,  you know, regardless of when you're online, you know, so-called asynchronous. And so,  yeah, collage was, it was a good idea. It just wasn't, wasn't quite clicking. And then it just,  it kind of became clear to me and a few of the other folks that I worked with there at the time  that it's just like, okay, something else is going to pop here and it's going to pop hard.  And it's going to be something involving like this, you know, the web, gopher,  waste, like this confluence of basically new thinking of, of user interfaces is going to  take place. And then, and then by the way, it's basically two, two big things, the two big things  that sort of we insisted on. The two big leaps was one is we're just going to assume that everybody  has a graphical computer. We're just going to assume that everybody has like Windows or a Mac  or a Unix workstation. We're not going to support not DOS, right? And, and, and all systems up until  that point, you know, including, by the way, the early, you know, the first web browser, the first  web browser was a text-based, text-based browser, you know, the Tim Berners-Lee browser, it was a  browser that actually was a text-based browser that ran on the next cube, of which there were maybe  5,000 of the world at that point. Because that was like one of the most graphical machines ever.  Yeah, but he had this problem. He had this problem is he had the problem. So first of all,  the problem of just like there was no graphical content, there was no graphical, you know, you  just like, just the assumption was it was going to be text-based. And then the other, the other  problem was we just assumed that the internet was going to be fast. And that was a, again, a  heretical assumption. That was a heretical assumption at the time, because at the time,  the internet was really slow. And most people run very slow connections. And so, you know, the  experience a lot of people had the first time they use Mosaic on even, even on a broadband  connection, the first time editors, you would literally watch the page load line by line.  And then you would watch the images load line by line, right? And so, but it was a heretical  idea at that point to say, no, we're just going to assume everybody's on a graphical interface,  and we're going to assume that everybody's on a broad, fast broadband connection, and we're just  not going to compromise. We're going to build the correct user interface for that new world  on those two fronts. And we're not going to compromise to try to be backward compatible  with the old text-based UIs or with the old narrowband connections.  And in a way, that you were a university student with no company, no need to sell anything in  the beginning. So it was like, fair enough. Yeah. And my computer, because I worked at IBM,  and then I worked at NCSA, and we had all this money for the government at that point,  my computer was an SGI Silicon Graphics at the time, company leading Unix computer company at  the time, you know, amazing company, but they, you know, they made these workstations and the  workstations cost $50,000 in 1992 dollars, you know, just like a hundred and some thousand today.  And but that, you know, my computer was one of those. And so, and on a fast connection. And so  I'm just like, look, I'm just going to build it for that. And then my colleagues built it  versions for Windows and Mac, but like, we're just not going to compromise for the old hardware  that everybody else is on, we're just going to assume that in the future, everybody gets something  like this. Yeah. And then yeah, we at your point, like we were running on federal research money,  so we had no commercial, we had no commercial incentive, we had no reason to go for,  you know, large numbers of users or, you know, try to, you know, make money or whatever at the  time. So we just basically, again, and the heresy, we just designed for the future. And then there  was a little bit, I had a little bit of a glimmer, I wouldn't say I was confident on this, but I had  a little bit of a glimmer at the time, that was like, look, if we designed for, if we designed  for broadband, like the, if it's a compelling enough user interface, it will actually cause  broadband to happen. That would be aggressive. Right. This is a, my, my favorite philosopher,  Nicolland has this term called hyperstition, which is the idea of sort of, you know, sort of  willing an idea into existence just by proposing it, sort of like pulling the future forward.  And it's basically, and the idea basically was if people could just see what was possible with a  modern, you know, Unix workstation on a modern broadband network with, you know, with what we  then built, if they could just see that with Mosaic, they would be like, wow, I need that. And  then they would price it and they would be like, oh my God, I can't afford that. But then they would  say, well, I need a version of that that I can afford. And then that, and then that would be a  motivation for the phone companies to start to offer broadband and for the, you know, for the PC,  for, you know, for the PCs to start to get built in internet connectivity and for people to upgrade  from DOS to Windows and all these other things that followed. And so I, as I said, I wasn't  confident about that, but I had a glimmer of it because I was like, look, like if, if you could  get through this not whole, and if you could get the world to the other side where everybody has a  GUI and everybody has broadband, then all of a sudden it's just very clear that you just, you  have all of these incredibly compelling things that you can do that are impossible otherwise.  And so it was kind of a hard shove in that direction. And then the other, the other I would  say big breakthrough, or that I would not break through the other really important conceptual  rule that we had at the time, which was a, which was sort of consistent with the internet philosophy  of the time was it had to be an open platform. And specifically it had to be whatever it was,  it had to be where anybody could create servers and anybody could create content.  And so it had to be very easy to do that. And so, and you remember in those days,  it was sort of famous that you could implement a web server and four lines of Perl script,  right, to do whatever you wanted. And so, and you could create a web page just by writing HTML  by hand. And then by the way, people did and they were scaling issues with those four long  time web servers. That's how a lot of the big internet companies started out that way. Yes.  And then that's one of the reasons why the sites always crashed is exactly, but, but the point was,  the point was to optimize for, it was to optimize for the quality of experience and then optimize  for the openness and the creativity that would follow. Yeah. And again, there was a leap there,  right? And we got, you remember, we got a lot of criticism at the time, which was, wow, you know,  these, a lot of computer scientists at the time were like, wow, these guys are building the most  inefficient, you know, computer systems have ever been built. This thing is incredibly  inefficient. It's unoptimized. It's, you know, wasting network bandwidth. Where's the,  where's the ace in one encoding? Like this is strings. You guys are crazy. You're wasteful.  Wasteful. Yeah. Yeah. Big, you know, environmental arguments. You're burning, you know, power,  causing pollution. Yeah, we, these are all text-based protocols. So one of the, one of the design  principles was all protocols have to be text-based. There were no binary protocols. Text-based  protocols are much less efficient, much, much slower. But the enormous advantage is you can  program a text-based protocol by writing text. And you can read it by reading text, whereas if  it's in a binary format, you're always dealing with an, with an intermediary system, and it's just  harder to develop for and harder to understand. Do your source, you know, the,  There's a little counter to the, the belief of the computer science world at the time.  I mean, everybody read on ASM one encoding is that you have to do that.  Yeah. Any CS professor of that era who looked at this said they're doing it wrong.  100%. They said they're absolutely doing it wrong. Because it's not optimized. I mean,  so much of computer science at that point was about optimizing scarce resources, because  that was all you had at that time. And they had spent, you know, decades figuring out how to do  that. And we just decided, we, you know, we collectively decided to just break that rule.  And again, it was, it was, it was not to break the rule, just to break it. It was because what was  on the other side of breaking that rule was openness and creativity and empowerment. And  anybody can do anything. And then. Inclusivity, right? You didn't have to be a computer scientist,  networking expert to, to build a web server. Yeah, that's right. And the experience people  had, you know, the killer, the killer kind of version of this that ended up working really"
}