{
    "title": "Transition to Graphical User Interfaces and Broadband Connections",
    "description": "A significant shift discussed in the podcast is the transition to graphical user interfaces and fast broadband connections. The speakers highlighted their decision to design for a future where users have graphical computers and fast internet, disregarding the prevalent text-based interfaces and slow connections of the time. This bold move influenced the course of technology by setting standards for user experience and network speed expectations, subsequently driving innovations in hardware and connectivity.",
    "start_time": 3053.28,
    "end_time": 3376.0,
    "text": " with the old text-based UIs or with the old narrowband connections.  And in a way, that you were a university student with no company, no need to sell anything in  the beginning. So it was like, fair enough. Yeah. And my computer, because I worked at IBM,  and then I worked at NCSA, and we had all this money for the government at that point,  my computer was an SGI Silicon Graphics at the time, company leading Unix computer company at  the time, you know, amazing company, but they, you know, they made these workstations and the  workstations cost $50,000 in 1992 dollars, you know, just like a hundred and some thousand today.  And but that, you know, my computer was one of those. And so, and on a fast connection. And so  I'm just like, look, I'm just going to build it for that. And then my colleagues built it  versions for Windows and Mac, but like, we're just not going to compromise for the old hardware  that everybody else is on, we're just going to assume that in the future, everybody gets something  like this. Yeah. And then yeah, we at your point, like we were running on federal research money,  so we had no commercial, we had no commercial incentive, we had no reason to go for,  you know, large numbers of users or, you know, try to, you know, make money or whatever at the  time. So we just basically, again, and the heresy, we just designed for the future. And then there  was a little bit, I had a little bit of a glimmer, I wouldn't say I was confident on this, but I had  a little bit of a glimmer at the time, that was like, look, if we designed for, if we designed  for broadband, like the, if it's a compelling enough user interface, it will actually cause  broadband to happen. That would be aggressive. Right. This is a, my, my favorite philosopher,  Nicolland has this term called hyperstition, which is the idea of sort of, you know, sort of  willing an idea into existence just by proposing it, sort of like pulling the future forward.  And it's basically, and the idea basically was if people could just see what was possible with a  modern, you know, Unix workstation on a modern broadband network with, you know, with what we  then built, if they could just see that with Mosaic, they would be like, wow, I need that. And  then they would price it and they would be like, oh my God, I can't afford that. But then they would  say, well, I need a version of that that I can afford. And then that, and then that would be a  motivation for the phone companies to start to offer broadband and for the, you know, for the PC,  for, you know, for the PCs to start to get built in internet connectivity and for people to upgrade  from DOS to Windows and all these other things that followed. And so I, as I said, I wasn't  confident about that, but I had a glimmer of it because I was like, look, like if, if you could  get through this not whole, and if you could get the world to the other side where everybody has a  GUI and everybody has broadband, then all of a sudden it's just very clear that you just, you  have all of these incredibly compelling things that you can do that are impossible otherwise.  And so it was kind of a hard shove in that direction. And then the other, the other I would  say big breakthrough, or that I would not break through the other really important conceptual  rule that we had at the time, which was a, which was sort of consistent with the internet philosophy  of the time was it had to be an open platform. And specifically it had to be whatever it was,  it had to be where anybody could create servers and anybody could create content.  And so it had to be very easy to do that. And so, and you remember in those days,  it was sort of famous that you could implement a web server and four lines of Perl script,  right, to do whatever you wanted. And so, and you could create a web page just by writing HTML  by hand. And then by the way, people did and they were scaling issues with those four long  time web servers. That's how a lot of the big internet companies started out that way. Yes.  And then that's one of the reasons why the sites always crashed is exactly, but, but the point was,  the point was to optimize for, it was to optimize for the quality of experience and then optimize  for the openness and the creativity that would follow. Yeah. And again, there was a leap there,  right? And we got, you remember, we got a lot of criticism at the time, which was, wow, you know,  these, a lot of computer scientists at the time were like, wow, these guys are building the most  inefficient, you know, computer systems have ever been built. This thing is incredibly  inefficient. It's unoptimized. It's, you know, wasting network bandwidth. Where's the,  where's the ace in one encoding? Like this is strings. You guys are crazy. You're wasteful.  Wasteful. Yeah. Yeah. Big, you know, environmental arguments. You're burning, you know, power,  causing pollution. Yeah, we, these are all text-based protocols. So one of the, one of the design  principles was all protocols have to be text-based. There were no binary protocols. Text-based  protocols are much less efficient, much, much slower. But the enormous advantage is you can  program a text-based protocol by writing text. And you can read it by reading text, whereas if  it's in a binary format, you're always dealing with an, with an intermediary system, and it's just  harder to develop for and harder to understand. Do your source, you know, the,  There's a little counter to the, the belief of the computer science world at the time.  I mean, everybody read on ASM one encoding is that you have to do that.  Yeah. Any CS professor of that era who looked at this said they're doing it wrong.  100%. They said they're absolutely doing it wrong. Because it's not optimized. I mean,  so much of computer science at that point was about optimizing scarce resources, because  that was all you had at that time. And they had spent, you know, decades figuring out how to do  that. And we just decided, we, you know, we collectively decided to just break that rule.  And again, it was, it was, it was not to break the rule, just to break it. It was because what was  on the other side of breaking that rule was openness and creativity and empowerment. And  anybody can do anything. And then. Inclusivity, right? You didn't have to be a computer scientist,  networking expert to, to build a web server. Yeah, that's right. And the experience people  had, you know, the killer, the killer kind of version of this that ended up working really  well was this idea of view source. Yeah. And so there was this feature built that we built into  mosaic and it was built into browsers, which was, I forget exactly when it popped up, but"
}